WEBVTT

00:00.730 --> 00:02.050
Hi and welcome back.

00:02.050 --> 00:07.840
So let's jump right into the name topples the modification and the extension of named offals of course

00:07.870 --> 00:13.510
when I say modifying and extending named topples I'm not talking about mutating the name table.

00:13.540 --> 00:15.760
We can't because it's immutable.

00:15.760 --> 00:21.380
Instead what we're doing is just like with strings we're essentially creating new name topples.

00:21.490 --> 00:28.390
Either the class or name Papel itself based off another existing name topple either the class or the

00:28.390 --> 00:29.260
instance.

00:29.560 --> 00:31.780
So let's see how we might go about doing that.

00:31.780 --> 00:36.000
Let's go ahead and create a pointer to the name of pulque.

00:36.130 --> 00:38.120
So let's create it.

00:38.320 --> 00:40.090
All I have to import.

00:40.120 --> 00:46.700
So from collections import named Toppo and then let's create it.

00:46.710 --> 01:00.930
So point to the right type equals named top will point to the prefer single quotes to double quotes.

01:01.150 --> 01:04.210
And we just really want two fields in the specs and one.

01:04.390 --> 01:04.910
OK.

01:05.080 --> 01:07.900
So now we have a point to the class.

01:07.900 --> 01:10.420
Essentially that's been generated by name topple.

01:10.470 --> 01:17.590
Now we can go ahead and create an instance of that class by just calling the class and passing the values

01:17.590 --> 01:19.750
we want let's say 10 and 20.

01:19.750 --> 01:21.290
So now we have that point.

01:21.300 --> 01:28.540
Now we know that we can recover the item let's say at index 0 which is the x k we can also do it as

01:28.780 --> 01:30.500
T-Dog x.

01:31.150 --> 01:38.760
But of course we cannot say that X equals 100 because the name table is immutable.

01:38.800 --> 01:43.720
And of course we can't do this either because we're just accessing again the underlying topple.

01:43.810 --> 01:47.050
We can modify it so we can't do that.

01:47.050 --> 01:54.190
Instead what we can do is we can create a new name for instance a point to the instance based of the

01:54.190 --> 01:55.270
previous one.

01:55.270 --> 01:58.630
So in this case let's say I just want to modify the x parameter.

01:58.630 --> 02:01.370
I want the x value to become a hundred.

02:01.420 --> 02:04.470
So I would have to create a new point to D.

02:04.750 --> 02:07.040
And I would have to pass it 100.

02:07.210 --> 02:13.570
And I want to however preserve the y coordinates so I'm going to use whatever the Y code is currently

02:13.570 --> 02:18.050
for Peetie and then I'm going to assign that to P-T itself.

02:18.310 --> 02:23.530
Now before I do that let me just show you what the ID is of point.

02:23.600 --> 02:26.290
OK so that's the ID that's the memory address.

02:26.290 --> 02:31.060
Now we execute this line and Peetie now is different right.

02:31.060 --> 02:38.320
It's changed now it's 100 comma 20 but in fact what happened is that the point itself has changed.

02:38.380 --> 02:45.280
So the memory address that Peetie was was pointing to was was referencing has changed.

02:45.280 --> 02:47.360
It's not the same.

02:47.510 --> 02:51.790
So it's just like with strings like if we have let's say as equals Python.

02:51.970 --> 03:00.620
OK then we have the idea s that some memory address if we say x plus equals groks OK something like

03:00.620 --> 03:01.060
this.

03:01.100 --> 03:06.820
Then of course as now looks like Python rocks but we haven't actually mutated as.

03:06.950 --> 03:10.520
What's happened is that the memory address of S has changed.

03:10.520 --> 03:10.900
Right.

03:10.940 --> 03:12.020
Here's what it was.

03:12.200 --> 03:13.070
Here's what it is.

03:13.100 --> 03:18.550
So we can certainly use this approach if you have a relatively simple name top.

03:18.590 --> 03:20.740
But what happens when you have a longer one.

03:20.750 --> 03:23.030
Let's go back to our stock example.

03:23.210 --> 03:29.450
So let's create a named top hole and it's going to be a stock that's the name of the class and we're

03:29.450 --> 03:36.530
going to have the symbol the huge the long the day the open the high the low and the close.

03:36.590 --> 03:37.130
OK.

03:37.430 --> 03:38.930
So this is on the table.

03:39.350 --> 03:41.840
And now let's go ahead and create an instance of that.

03:42.080 --> 03:47.640
And I'm just going to copy paste it from my notes and I'm going to cheat.

03:48.230 --> 03:49.920
So here's our name total.

03:50.100 --> 03:50.830
OK.

03:51.290 --> 03:54.850
And let's say that we want to change some value in there.

03:54.950 --> 03:56.990
Let's say it's the close.

03:57.110 --> 04:02.100
Now we can certainly go ahead and basically do the same technique that we did over here.

04:02.600 --> 04:05.240
But it's going to be a little bit more lengthy.

04:05.270 --> 04:05.560
Right.

04:05.570 --> 04:13.840
We don't have to say it's a stock and then we're going to take the existing Singo and the existing years

04:14.540 --> 04:18.190
and the existing month et cetera.

04:18.200 --> 04:28.790
You get the picture the day I'll continue on the next line where the symbol the year of the month the

04:28.790 --> 04:36.040
day we need the open we need the high we need the low.

04:36.140 --> 04:40.610
And finally we can replace it with something else we can replace the clause with something else.

04:40.610 --> 04:41.930
So we do that.

04:41.930 --> 04:45.590
See I even have a syntax error somewhere.

04:48.030 --> 04:50.570
I have a problem because I don't have a comma there.

04:50.760 --> 04:51.150
OK.

04:51.290 --> 04:52.120
There we go.

04:52.560 --> 04:57.630
So as you see it's a lot of typing and you can make mistakes when you type the less you type the less

04:57.630 --> 04:58.550
mistakes you make.

04:59.430 --> 05:00.090
So there we go.

05:00.090 --> 05:04.790
We have now the DJIA is now been changed modified.

05:04.800 --> 05:06.140
But of course it hasn't.

05:06.270 --> 05:13.060
The pointer of that DJIA basically was is now a different object in memory.

05:13.110 --> 05:16.440
It looks like it's change but it's just the reference that has changed.

05:16.440 --> 05:23.040
It's changed to a new object which was a copy essentially of the previous one but we just modified one

05:23.040 --> 05:26.050
of the fields in there.

05:26.280 --> 05:27.910
So that's kind of unwieldy.

05:27.990 --> 05:34.800
There's got to be a better way to do that so we could try by extracting the data using either unpacking

05:34.920 --> 05:39.440
or using slices from our original stock symbol.

05:39.450 --> 05:42.310
So I'll keep DJI it's got a thousand right now.

05:42.480 --> 05:49.200
And let's say I want to take this and change the clothes back to 26 393.

05:49.290 --> 05:55.470
So one way of doing it using unpacking Let's do that first time I try something like this I might say

05:58.410 --> 06:03.370
store values karma close equals DJIA.

06:03.370 --> 06:04.320
So now what do we have.

06:04.330 --> 06:12.460
Well the values have all the values up to and including the low the 26 to 60 right this low over here.

06:12.670 --> 06:21.960
And then the close of course is I type it type it is 1000 and that's when we're going to ignore.

06:21.970 --> 06:27.430
So typically when we ignore value we'll write an underscore just to indicate that I'm ignoring this

06:27.430 --> 06:28.890
value and throwing it away.

06:29.050 --> 06:32.470
But I'm still using extended unpacking to unpack the bags.

06:32.530 --> 06:34.810
So now I have that I don't have clothes.

06:35.380 --> 06:42.280
So now that I have these values in this list that I got by unpacking I can append essentially my new

06:42.490 --> 06:44.340
clothes to that list.

06:44.380 --> 06:49.810
So there's different ways I can do it either I can go ahead and say values clause and then the list

06:49.810 --> 06:54.650
item for example 26 3 9 3.

06:55.060 --> 06:57.190
I can do it that way or better.

06:57.280 --> 07:00.230
I can just append because the list is mutable.

07:00.460 --> 07:02.130
So I can append this value.

07:02.410 --> 07:09.220
And now if I look at values while it has now everything I need plus now that close again that's been

07:09.220 --> 07:11.270
replaced essentially.

07:11.290 --> 07:15.550
Now that I have those values I can go ahead and create a new stock.

07:15.550 --> 07:17.390
OK so I can say stock.

07:17.530 --> 07:18.510
Now what do I want.

07:18.520 --> 07:21.370
Well I want to pass these in as the arguments.

07:21.580 --> 07:27.970
So I'm going to have to unpack that because I can't pass a list if I pass a list to stock that I do

07:27.970 --> 07:28.590
this.

07:28.720 --> 07:34.510
I get an error because stock is expecting seven positional arguments and I've only essentially passed

07:34.510 --> 07:35.860
with one which is a list.

07:35.860 --> 07:37.270
That's not what I wanted.

07:37.630 --> 07:42.490
So it needs one two three four five six seven sorry eight positional arguments.

07:42.490 --> 07:43.980
It only received one.

07:44.050 --> 07:46.320
So that's why it's saying that's missing 7.

07:46.360 --> 07:51.250
So I need to unpack those values in order to pass them as individual arguments.

07:51.250 --> 07:57.720
So if we do that we'll get our stuff created and I'm just going to reassign it to DJI.

07:58.490 --> 08:02.200
And so now if we look at that we have exactly what we had before.

08:02.200 --> 08:04.440
So we reverted back to that close.

08:04.840 --> 08:09.670
So that's one way of doing it by using unpacking is unpacking how I would be careful.

08:09.670 --> 08:12.640
You're getting a list back out of the unpacking.

08:12.640 --> 08:17.720
So you have to make sure that when you append you append a number it's a mutable list.

08:17.720 --> 08:18.470
Or you can do that.

08:18.490 --> 08:20.400
Or you of course could concatenate to lose.

08:20.410 --> 08:25.870
You can make a list out of your clothes and just concatenate that with a plus sign.

08:25.870 --> 08:30.250
But what happens is that you're needlessly creating a new list.

08:30.250 --> 08:34.100
What I mean by this is let's say I have a list is one to three.

08:34.300 --> 08:34.790
OK.

08:34.960 --> 08:37.390
Now the idea of a is this.

08:37.390 --> 08:42.040
Now let me go and say A is equal to a plus for column of five.

08:42.370 --> 08:44.340
So now is one two three four five.

08:44.360 --> 08:45.720
What's the idea of a.

08:45.970 --> 08:48.050
Well the idea of a has changed.

08:48.100 --> 08:48.430
OK.

08:48.460 --> 08:53.350
So by doing this concatenation I've created a new list and then assigned it back to A.

08:53.770 --> 08:56.600
If I Take A equals one to three.

08:56.820 --> 08:57.380
OK.

08:57.550 --> 09:00.380
Now I can look at the idea of a again.

09:00.880 --> 09:01.660
We have that.

09:01.690 --> 09:09.490
And if I say a append and I can append a single value let's say for.

09:10.000 --> 09:12.270
And you'll see that a now is 1 2 3 4.

09:12.280 --> 09:14.490
But the idea has not changed.

09:14.500 --> 09:17.090
It's the same with mutated that list.

09:17.110 --> 09:18.700
So that's a little bit more efficient.

09:18.760 --> 09:19.020
Right.

09:19.030 --> 09:25.570
I mean we can also extend we could say 8. extend let's say were five six seven.

09:25.750 --> 09:27.090
And now if I look at.

09:27.190 --> 09:29.210
It's been extended with 5 6 7.

09:29.230 --> 09:32.070
And the idea of a is still the same.

09:32.200 --> 09:34.090
We still have the same memory address.

09:34.090 --> 09:38.890
So append if you want a single value to append extend if you want to extend it with let's say of the

09:38.890 --> 09:44.380
list that's going to be a little bit more efficient because we're not having to recreate a whole new

09:44.380 --> 09:46.230
object anyways.

09:46.330 --> 09:51.840
Side note the other way that we can do this instead of using the unpacking that we did here.

09:51.880 --> 09:53.280
We could also use slicing.

09:53.410 --> 09:57.880
So let's go ahead and let's just bring back what the Dow Jones is.

09:57.880 --> 10:02.900
So this is the name Toppo and we want to go ahead and use a slice now to do this.

10:02.920 --> 10:05.990
So I could say values equals.

10:06.010 --> 10:11.920
Dow Jones Industrial will start at the beginning and we're going to stop but not include the last element

10:11.980 --> 10:16.620
which is index 0 1 2 3 4 5 6 7.

10:16.660 --> 10:19.780
So we want to go up to but not including seventh.

10:19.810 --> 10:22.490
So if we have that then values now is a top.

10:22.510 --> 10:23.470
All right.

10:23.500 --> 10:27.880
When we do slicing we get the same type back.

10:28.150 --> 10:29.580
So it's a tough call.

10:29.650 --> 10:34.650
In fact you can also look at the type of values it's a topple.

10:34.720 --> 10:39.140
It can't be a named couple of type stuff because it doesn't have all the values in it.

10:39.220 --> 10:42.070
So instead it's just going to be a plain top.

10:42.610 --> 10:49.210
So we can have that and of course what we can do is we can take values and we can concatenates to that.

10:49.210 --> 10:50.880
Now of course topples are immutable.

10:50.890 --> 10:52.900
So this is going to create a new top.

10:52.900 --> 10:58.590
We have no choice there and we're going to want to let's say I said it back to 100.

10:58.600 --> 11:00.700
Now I want to spend a couple right.

11:00.700 --> 11:06.050
I want to I want to concatenate two tables together I'm not pending I'm concatenating two tables together

11:06.460 --> 11:08.370
so I'll get the result.

11:08.680 --> 11:14.900
So now we can just say Dow Jones Industrial equals stock and we can take values.

11:15.430 --> 11:22.200
Clauss 100 karma what we really don't have to do it this way.

11:22.200 --> 11:23.100
Right.

11:23.190 --> 11:27.130
We can certainly do that and then we have to unpack it so we can do that.

11:27.150 --> 11:28.960
And we're back to what we had.

11:29.400 --> 11:31.470
But the other way to do it is just to say.

11:31.470 --> 11:34.450
Dow Jones Industrials equals stock.

11:34.530 --> 11:40.680
And then we're going to unpack the values and then we're just going to add that say tens of thousand.

11:40.830 --> 11:42.750
OK so we're still getting the same things.

11:42.750 --> 11:46.070
We're getting 7 values out of this one and this will be the value.

11:46.140 --> 11:48.420
So we'll have eight arguments that we're passing.

11:48.630 --> 11:51.710
So you can do this concatenation force and then unpack.

11:51.720 --> 11:55.720
That's kind of needless and useless and it doesn't really look very good.

11:55.860 --> 12:01.800
Instead use the fact that we can unpack the values and then just add the a parameter that we need.

12:01.950 --> 12:03.320
And so we get the same thing.

12:03.540 --> 12:07.340
And now we get now arccos is a thousand.

12:07.440 --> 12:13.390
But of course this really this these two methods don't work well if we want to change something in the

12:13.390 --> 12:18.260
middle if we want to change mournful day we saw in the lecture it gets really complicated.

12:18.520 --> 12:23.890
And I'm not going to delve into that there's no point because we have a much better way of doing this.

12:24.010 --> 12:28.570
With what name topples provides us which is the underscore replace function.

12:28.570 --> 12:31.240
It's a method it's an instance method.

12:31.240 --> 12:36.390
And so we would use the instance so we use the instance.

12:36.400 --> 12:38.590
Dow Jones Industrial I would say replace.

12:38.590 --> 12:41.440
And here we can just give parameters.

12:41.500 --> 12:47.500
And the keyword parameters with the name corresponding to the field in the name top all that we want

12:47.500 --> 12:48.740
to modify.

12:48.790 --> 12:51.280
Now of course we're not modifying anything.

12:51.280 --> 12:57.220
So let me just show you again the ID of the Dow Jones Industrial is this.

12:57.220 --> 13:02.590
Now we can say DJIA underscore replace.

13:02.590 --> 13:04.470
So we'll set that equal to.

13:04.620 --> 13:06.060
We'll set Dejah equal to that.

13:06.070 --> 13:07.120
And what are we going to replace.

13:07.120 --> 13:14.830
Well let's replace the year let's say people's 2019 let's say we want the open to be 10000 K and those

13:14.830 --> 13:16.110
are the two we want to do.

13:16.420 --> 13:19.080
So now we can go ahead and run this.

13:19.270 --> 13:25.890
And you'll notice that now we've changed the year and the open and by the way this is probably this

13:25.990 --> 13:28.640
wasn't the best idea for me to use open.

13:28.780 --> 13:31.720
I should have used an open underscore but that's an argument name.

13:31.720 --> 13:38.080
So that actually doesn't matter doesn't step over you know Python's open function but just still bad

13:38.080 --> 13:39.060
practice.

13:40.750 --> 13:47.440
But the thing is here that the ID of Dow Jones Industrial has change you can see here was two two to

13:47.440 --> 13:48.180
four.

13:48.190 --> 13:50.200
Here we have two three four four.

13:50.500 --> 13:54.570
So again it looks like we're replacing values and we are.

13:54.610 --> 13:58.660
But at the same time we're creating a new topple since couples are immutable.

13:58.720 --> 14:05.020
The whole thing I want to show you is the underscore make function that method is a class method so

14:05.020 --> 14:12.070
it works at the class level and instead of having to unpack the values like we did here we can actually

14:12.070 --> 14:13.800
just pass it in iterable.

14:14.050 --> 14:19.890
So if I take this example and that's why I wanted to show you that example is because we can do this

14:19.900 --> 14:22.360
now we don't have to unpack this at all.

14:22.360 --> 14:27.700
We can do it this way where we concatenate the values topple and this topple.

14:27.700 --> 14:33.370
And now instead of calling stuff which we know won't work because it's expecting a arguments we can

14:33.370 --> 14:40.510
call the underscore make method on the stock class and we'll take any iterable and basically do the

14:40.510 --> 14:43.200
unpacking for us so we can do it this way.

14:43.540 --> 14:49.430
And nonfood look at the DJIA we can see the clothes has been set back to a hundred.

14:49.450 --> 14:53.920
So either way either you can use an iterable without unpacking in which case you call the underscore

14:53.920 --> 14:59.320
make function or you unpack your arguments and you actually have eight arguments in this case and then

14:59.320 --> 15:03.510
you can just call the class constructor itself up to you how you want to do it.

15:05.100 --> 15:08.050
Personally I prefer this approach over here.

15:08.070 --> 15:13.610
It's a lot cleaner than this where you just have you know a little bit of extra stuff you got that camera

15:13.620 --> 15:15.930
you got the extra parentheses things like that.

15:15.930 --> 15:17.740
So I personally prefer this.

15:17.880 --> 15:22.910
But of course if you're doing those just to replace a value then just use this approach in this case.

15:22.920 --> 15:32.240
If I want to change just the clothes I would say underscore replace clothes are equals 10000 for example.

15:32.450 --> 15:39.900
And now my DJIA object has 10000 for the clothes.

15:39.930 --> 15:41.350
So pretty straightforward.

15:41.700 --> 15:44.730
So that's how we can modify a name top.

15:44.940 --> 15:47.340
We essentially can just use the underscore replace.

15:47.340 --> 15:51.180
That's the most efficient or the easiest way to do it.

15:51.210 --> 15:57.450
The next thing I want to cover is how we can maybe extend a name top all by adding a few fields to the

15:57.450 --> 15:58.540
end of that name top.

15:58.560 --> 16:00.790
Let's say that we have a point to the.

16:00.870 --> 16:03.700
So let's go back and let's create our points to D.

16:04.260 --> 16:05.870
I think it actually exists already.

16:05.880 --> 16:07.900
So we have the point to do.

16:08.250 --> 16:11.470
So let's take a look at the fields and point to D.

16:11.520 --> 16:11.780
Right.

16:11.790 --> 16:13.420
We have the x and y fields.

16:13.620 --> 16:21.330
Now we want to create a point 3D and you know the easiest way to do this is just to say name Tapazole

16:22.040 --> 16:23.470
point 3D.

16:24.000 --> 16:25.880
And then three fields x y and z.

16:25.950 --> 16:27.980
OK that's the easiest way of doing it.

16:28.230 --> 16:34.050
But I want to show you how we might do it by using the existing field names that aren't point to D and

16:34.050 --> 16:40.380
just appending one more field and this will work better if we have a long name topple where we're going

16:40.380 --> 16:44.590
to run into the same situation that we had when we were looking at the stock.

16:44.870 --> 16:45.200
Right.

16:45.210 --> 16:51.600
When we did the point and we created a new point instance using this technique it worked fine if you've

16:51.600 --> 16:57.060
got you know a couple or three fields in the name table but once you start getting beyond that once

16:57.060 --> 17:02.660
you start getting to like 7 or 8 like we are here then it's a lot more complicated to do the same thing.

17:02.660 --> 17:05.230
There was a lot of typing.

17:05.360 --> 17:09.060
So let's start with the point 3D just to keep it very simple.

17:09.320 --> 17:13.960
Well we're going to start by actually looking at the underscore fields of point 2 d.

17:14.000 --> 17:15.130
That's on top.

17:15.320 --> 17:21.710
What do we want to do we just want to add one more item a field name called Z to this name top or so

17:21.740 --> 17:22.910
that's pretty straightforward.

17:22.910 --> 17:27.520
We can say point to the underscore fields plus.

17:27.560 --> 17:31.040
And here I'm going to create a Toppo with Z.

17:31.730 --> 17:35.430
So if we did that we would end up with a table with x y z.

17:35.450 --> 17:39.990
So now I can just say point three The equals named Tottle.

17:40.250 --> 17:43.150
It's going to be a point three-D that's going to be the name of the class.

17:43.310 --> 17:53.810
And then here what I'm going to do is take point to the underscore fields that underscore fields close

17:54.590 --> 17:55.200
that top.

17:55.220 --> 17:58.820
So exactly what we just wrote there.

17:59.000 --> 17:59.660
OK.

17:59.960 --> 18:01.040
Cannot we do this.

18:01.040 --> 18:07.320
Now we have off point three with the three fields that we wanted K with x y and z.

18:07.760 --> 18:14.580
So that's how you could basically create or extend point to d by simply adding on extra fields.

18:14.660 --> 18:22.220
So it's not a real extension but it's a it allows us to create a name topple based on another one without

18:22.220 --> 18:23.750
having to recreate the world.

18:23.870 --> 18:27.640
Because if we take our stock again let's take a look at stock.

18:27.830 --> 18:29.150
Let's look at the fields.

18:29.450 --> 18:36.810
If I wanted to create let's say an extended stock let's say stock X equals named Tupac stock X T.

18:36.830 --> 18:44.030
And I just want to add the previous close to the end of this list here and then using that first technique

18:44.030 --> 18:44.710
that we looked at.

18:44.720 --> 18:50.360
I would have to actually type out everything your Monday open etc. right.

18:50.360 --> 18:50.870
I would have.

18:50.860 --> 18:56.410
And then I would have to add our previous close.

18:56.840 --> 18:59.960
So I would have to do something like that which is a lot of typing.

18:59.960 --> 19:07.280
Instead all we need to do is basically just take the existing stock under Scofield's plus and now we're

19:07.280 --> 19:14.840
just going to add previous close to that top all that we're passing and so we're using topples a list

19:14.840 --> 19:18.850
of strings basically a couple of strings to define the fields.

19:19.010 --> 19:26.450
And now we get our extended stocks or look at stock 60 underscore fields you can see that we have previous

19:26.450 --> 19:28.180
close now appended to the rest.

19:28.310 --> 19:30.940
So it was a lot simpler doing it this way.

19:32.060 --> 19:35.830
So that's how we can extend a name top or generated class.

19:35.840 --> 19:41.810
Essentially we can add some extra stuff to it just essentially by using the previous on the Scofield's

19:41.810 --> 19:42.630
property.

19:43.070 --> 19:44.450
What about the values.

19:44.450 --> 19:46.550
So now we have a point to deal.

19:46.550 --> 19:52.610
So let's look at P-T which is a point to D and I want to create a 3D point but I want to use this point

19:52.610 --> 19:54.130
to do as a base.

19:54.350 --> 19:57.830
Well it's kind of simple because Petey is a top hole.

19:57.980 --> 19:59.110
So what can I do.

19:59.110 --> 20:07.320
Well I can say our point let's call it P-T 3D lower case equals point 3D.

20:07.490 --> 20:10.550
Now what do I want to pass to it while I want to pass it.

20:10.670 --> 20:12.340
Good point values.

20:12.470 --> 20:17.910
But of course I need to unpack that it's a tuple I need to unpack them and then I'm going to pass that's

20:17.930 --> 20:21.000
say 100 for the third component for the Z.

20:21.140 --> 20:21.370
Right.

20:21.380 --> 20:25.750
Because unpacking this point is going to give me what it's going to give me a hundred and twenty.

20:25.760 --> 20:27.510
Remember point it's just a couple.

20:27.710 --> 20:31.450
Yes it's a name topple But at its base it's still a topple.

20:31.610 --> 20:32.770
So we can do that.

20:32.810 --> 20:35.790
And now if we look at Point 3D we have that.

20:35.810 --> 20:45.080
In fact we've got 120 from the original one and then this one was a 100 now I know that I'd be just

20:45.080 --> 20:49.870
as easy writing point three-D you know dot X-Com Peetie dot y.

20:50.000 --> 20:51.420
That's probably just as easy.

20:51.470 --> 20:56.010
But again when you have more fields it's easier doing this method over here.

20:56.090 --> 20:57.270
Let's look at the stock.

20:57.440 --> 21:02.990
Let's look at our Dow Jones Industrial and let's say we want to create an extended version of that.

21:03.050 --> 21:06.320
So we would just have to say that we're creating stock 60.

21:06.470 --> 21:12.710
We're going to take the unpacked values from the Dow Jones Industrial to pull this one and we're just

21:12.710 --> 21:18.350
going to add let's say a let's say close at a million the day before.

21:18.440 --> 21:18.950
OK.

21:19.370 --> 21:24.250
So now we have our name Tupac.

21:24.970 --> 21:30.760
And you can see that previous closes that and then all the values basically carried over from the Dow

21:30.760 --> 21:38.200
Jones industrial average variable that we had that was a regular stock class.

21:38.250 --> 21:44.280
So that's how we can extend and modify named tuples both the class and the values themselves.

21:44.280 --> 21:44.600
All right.

21:44.610 --> 21:46.530
So thanks for watching and I'll see you in the next video.
