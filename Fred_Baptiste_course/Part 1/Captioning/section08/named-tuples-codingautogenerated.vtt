WEBVTT

00:00.270 --> 00:01.740
Hi and welcome back.

00:01.740 --> 00:06.140
So let's dig right into the code for named topples before we do that.

00:06.150 --> 00:09.390
As we mentioned in the video you might be tempted to write something like this.

00:09.390 --> 00:16.140
Let's say we want to do a three dimensional point so we might want to do a class tool say class Point

00:16.230 --> 00:23.190
3D and then we're going to use our init method to pass in three values and then we're going to create

00:23.250 --> 00:33.410
properties of those that will say self-taught examples X Sal got y y self got z z and that's it.

00:33.420 --> 00:34.200
That's our class.

00:34.200 --> 00:36.370
Pretty straightforward pretty easy.

00:36.580 --> 00:41.560
If you find yourself doing that quite often and if you find yourself doing that simply because you want

00:41.560 --> 00:47.080
to have a data structure where you have names for the values that you have inside the data structure

00:47.590 --> 00:52.920
take a step back and think about this because a name top hole is a better way of doing it.

00:52.930 --> 00:54.660
Now of course name tables are immutable.

00:54.670 --> 01:01.600
So if you need mutability that's out but otherwise if you don't and very often it's much safer to write

01:01.720 --> 01:07.330
immutable objects because that way you know if you pass them to a function nobody's going to modify

01:07.330 --> 01:09.550
the object without you knowing about it.

01:09.550 --> 01:10.860
It's much safer.

01:11.050 --> 01:18.400
So we tend to want to write immutable classes or classes with immutable properties as much as we can.

01:19.260 --> 01:22.090
So let's go ahead and use a named topple instead.

01:22.230 --> 01:26.640
So we're going to have to import name toppled from collections

01:29.310 --> 01:31.410
and then topple is a function.

01:31.410 --> 01:32.310
It is not a class.

01:32.310 --> 01:34.880
Remember that it is a class factory.

01:35.830 --> 01:37.280
So how do we go about doing it.

01:37.290 --> 01:39.340
Let's say we want a two dimensional point.

01:39.370 --> 01:44.550
So we'll just call the name top all we need to tell is the name of the class that we want.

01:44.560 --> 01:49.210
We're going to call it point to D and by convention we usually assign it to a variable name.

01:49.210 --> 01:53.980
What comes back from top topple is a class and we assign it to the variable name with the same name

01:53.980 --> 02:01.120
as the class just keeps things you know kind of neat and orderly and then we need to pass in the fields.

02:01.120 --> 02:04.700
So in this case I'm going to use a list just like we had in the original example.

02:05.020 --> 02:06.540
So we'll pass on two fields.

02:06.550 --> 02:07.980
Those are valid names.

02:08.050 --> 02:11.890
They're valid identifiers and they don't start of an underscore.

02:11.980 --> 02:15.250
So this is valid for named top.

02:15.370 --> 02:17.910
So now we have a pointer to the class.

02:17.950 --> 02:21.210
Essentially this is a class that was generated by name top.

02:21.460 --> 02:29.310
We can generate instances of points this way we can say point one equals point to D 10 to 20.

02:29.780 --> 02:34.060
OK so now we have this class and now we can actually look at the representation of the class and you

02:34.060 --> 02:38.200
can see that comes back as point to DXi calls 10 y equals 20.

02:38.200 --> 02:39.830
So that's kind of nice.

02:39.850 --> 02:47.020
Now if we did that our point 3D class we could say something like this point 3D underscore one Michael's

02:47.020 --> 02:50.930
point 3D 10 camera 20 calm authority.

02:51.220 --> 02:56.230
So you can see that we're creating a point 3D and point to d in a very similar way.

02:57.070 --> 03:01.110
But if I say foin 3D underscore one what do I get.

03:01.240 --> 03:03.000
I get this over here.

03:03.400 --> 03:06.250
So in order to fix that I would have to add more code.

03:06.280 --> 03:12.250
I would have to write something like write a wrapper and we'll see how to do that in a few minutes.

03:12.250 --> 03:18.520
But I would have to implement that in order to get that nice display that nice representation of my

03:18.670 --> 03:24.370
point 3D class named Apple does that for us that comes kind of along for free.

03:24.460 --> 03:26.000
So that's kind of nice.

03:26.020 --> 03:32.470
Also I want to just point out as we mentioned in the lecture video I could also call this P-T let's

03:32.470 --> 03:33.890
say 2d.

03:34.000 --> 03:34.560
Right.

03:34.600 --> 03:39.300
And that could be a named topple not the name of the class is going to be.

03:39.290 --> 03:41.950
Point three point to D.

03:42.250 --> 03:44.800
And again we'll use x and y.

03:44.830 --> 03:50.170
In this case just to show you I'm going to use a couple of field names.

03:50.290 --> 03:53.960
So now we have this class that was generated by named topple.

03:54.100 --> 03:59.800
But the class name is point to D which just assigned to a different variable name but this variable

03:59.800 --> 04:03.140
points to whatever class was returned my name topple.

04:03.190 --> 04:09.750
So now we can create a point we can say P-T two equals P-T to D 10 comma 20.

04:09.810 --> 04:10.740
We've created that.

04:10.750 --> 04:16.100
And if we look at what that is you can see the representation still says point to D.

04:16.150 --> 04:16.360
Right.

04:16.360 --> 04:18.680
It has nothing to do with the variable name.

04:18.820 --> 04:19.880
So just keep that in mind.

04:20.020 --> 04:22.060
And this is why we usually don't do that.

04:22.080 --> 04:26.890
We just say points to d we keep it the same that way is more it's more consistent.

04:26.950 --> 04:30.290
I'm creating an instance of point to d that's what we're used to.

04:30.430 --> 04:37.990
And in fact that is the name of the class and this is really no different than it would say P-T 3D quolls

04:38.020 --> 04:39.650
point 3D.

04:39.820 --> 04:40.490
Right.

04:40.510 --> 04:48.070
We have this variable name now that points to the same class that point 3D points to one 3D of course

04:48.100 --> 04:54.400
is just a name that a variable name essentially that Python created for us that points to the class

04:54.730 --> 04:55.800
Point 3D.

04:55.840 --> 04:58.740
That's what this statement does it does two things.

04:58.930 --> 05:07.990
So we can Aliase point 3D with 3D and now we can create a point safee he calls P-T 3D 10 20 come forward.

05:08.050 --> 05:13.630
That's for Watson to look at P we can see it is though an instance of Point 3 that's the name of the

05:13.630 --> 05:14.010
class.

05:14.020 --> 05:16.350
It has nothing to do with the variable name here.

05:16.510 --> 05:22.000
The other thing too that's nice with classes for example here what we did and very commonly we do that

05:22.150 --> 05:29.120
the parameter names x y and z are the same as the at the property names the attributes X Y and Z.

05:29.350 --> 05:36.460
So that means that to create an instance of point 3D I could save people's point three-D actually cost

05:36.460 --> 05:41.480
to 10 y equals 20 and z equals story that will work just fine.

05:41.530 --> 05:48.460
And now P-doc X's 10 P-Dub Why is 20 and so and we can do the same thing with name topples the class

05:48.460 --> 05:53.680
that is generated when we call named Toppo actually uses those field names.

05:53.680 --> 05:57.120
Also has the parameter names in whatever creates the class.

05:57.120 --> 06:01.080
So now we can say p equals point to D.

06:01.240 --> 06:03.730
X equals turn y equals 20.

06:03.730 --> 06:09.370
So again this helps make our code more readable and if we look at P indeed we have 10 common 20 right.

06:09.370 --> 06:15.860
We have the top but remember p is a top of it is a class that inherits from Toppo.

06:15.860 --> 06:20.110
So in fact we can do is instance P comma.

06:20.600 --> 06:22.210
And the answer will be true.

06:22.460 --> 06:29.300
That of course would not be the case if we have this if we have a point three-D and we check is instance

06:29.750 --> 06:31.350
P comma topple.

06:31.490 --> 06:32.770
Well the answer is false.

06:32.780 --> 06:38.680
It is not inheriting from top but point to D does and so it has a lot of advantages.

06:38.810 --> 06:39.650
If we have that.

06:39.740 --> 06:45.260
So we saw what was missing from our class that we created ourselves was the representation we got this

06:45.320 --> 06:49.120
for the name Toppo but we got this for our own class.

06:49.130 --> 06:51.190
Here's another thing that we're missing as well.

06:51.680 --> 06:58.460
Let's say and we get that because tables are tables right so I can say 10 20 let's say eight equals

06:58.490 --> 07:01.890
10 20 and B equals 10 20.

07:01.910 --> 07:02.850
Now was.

07:03.140 --> 07:05.610
This is a B The answer is no.

07:05.630 --> 07:07.870
These are two different objects in memory.

07:08.000 --> 07:14.140
However eight equals equals B is true because we have the same values of the same positions.

07:14.180 --> 07:18.900
So Python has that for topples since the name toppled inherits from topple.

07:19.040 --> 07:20.880
We actually get that for free as well.

07:20.930 --> 07:21.690
Let's take a look.

07:21.710 --> 07:31.010
Let's say we have point one because point to D 10 Commack 20 and point two equals points to D 10 common

07:31.010 --> 07:32.840
20 k we have these two points.

07:32.850 --> 07:36.250
Now is Peetie want the same as two.

07:36.260 --> 07:37.190
The answer is no.

07:37.250 --> 07:44.040
They're not the same objects that live in different you know memory addresses however 12:57 equals equals

07:44.040 --> 07:48.140
P-T 2 we get true.

07:48.390 --> 07:54.410
And that wouldn't be the case with our point three declasse if we say P-T one equals point three in

07:54.770 --> 08:05.410
10 20 30 and P-T two equals point three 10 20 30 then P-T one is Peetie.

08:05.430 --> 08:07.000
Obviously it's going to be false.

08:07.170 --> 08:12.920
But also P-T 1 equals equals 2 is also false.

08:12.930 --> 08:19.990
So now in order to fix those two problems we would have to implement the Dondre wrapper and the donder

08:19.990 --> 08:22.040
equals Let's do that very quickly.

08:24.020 --> 08:31.200
So you would have to say def under repr self.

08:31.400 --> 08:33.070
And here we're going to return.

08:33.080 --> 08:36.740
I'm going to use one of these new strings in Python.

08:36.880 --> 08:37.940
3:6.

08:38.210 --> 08:50.630
And we'll do it this way so we're going to return back on self Darb gander class to get the class Gunders

08:50.670 --> 08:53.040
name to get the name of the class.

08:53.090 --> 09:03.040
So that's going to be the class and then we're going to pass x equals self-doubt X comma y equals x

09:03.050 --> 09:04.880
comma.

09:05.530 --> 09:08.000
Actually yeah that's right.

09:08.000 --> 09:10.800
Y equals self-doubt Y.

09:11.000 --> 09:12.140
And we close that.

09:12.950 --> 09:18.740
So now we have the representation for our class we also need to implement the dump the dungaree calls.

09:18.750 --> 09:30.440
So we have self and others we've how to do that before so we can say if it is instance other of point

09:30.440 --> 09:33.110
3D what are we going to want to do.

09:33.140 --> 09:36.280
We're going to want to check the quality of the X Y and Z.

09:36.290 --> 09:43.210
So we're going to say return self-caused X equals equals other dot X and self-help y equals equals are

09:43.330 --> 09:49.390
not Y and self-doubt z equals equals other Godsey else.

09:50.120 --> 09:54.380
If it's not the same type we're just going to say no you can't have equality.

09:54.890 --> 10:01.060
OK so now you saw we had to add quite a bit of code to do things that we got free with the name topple.

10:01.130 --> 10:03.440
So no classes got all that more complicated.

10:03.440 --> 10:07.160
It wasn't just as simple as you know set up these three properties.

10:07.160 --> 10:11.010
We want to make them behave nicely so we have to add some extra functionality.

10:11.420 --> 10:17.420
So no of course if we do this let's create those two points 3-D.

10:17.450 --> 10:22.790
Now I can look at the representation of pool and you know what it tells me it's point 3D Ezekial 10

10:22.790 --> 10:23.990
Wiggles 20.

10:24.170 --> 10:28.490
And of course I should probably add a third component.

10:28.490 --> 10:30.530
So there we go Selldorf Z.

10:30.930 --> 10:31.900
Now we get that right.

10:31.910 --> 10:36.390
10:23 and P-T one equals equals two.

10:36.500 --> 10:38.060
Now returns true.

10:38.300 --> 10:41.240
Right so now we have that functionality that we didn't have.

10:41.600 --> 10:45.870
But there's other things that we lose by the fact that point 3D is not a top.

10:46.070 --> 10:53.450
For example how would we find the maximum value of the you know the maximum coordinate in a point.

10:53.690 --> 11:01.400
Well if we're looking at let's say point 1 equals point to the 10 common 20 and let's say point to the

11:01.400 --> 11:04.630
cost point 3D 10 20.

11:04.930 --> 11:05.530
OK.

11:05.690 --> 11:09.650
And we want to find the maximum value of the 10 20 in this point.

11:09.650 --> 11:13.360
What's the maximum call that while P-T 1 is a top or.

11:13.430 --> 11:17.250
Very simple to say Matzke T-1 we get 20.

11:17.330 --> 11:22.640
What about Max FTT to me that.

11:22.990 --> 11:28.670
And we get that point 3D object is not iterable it cannot iterate through P-T to it's not a topple it's

11:28.670 --> 11:30.470
not list it's not an iterable.

11:30.470 --> 11:31.310
So this doesn't work.

11:31.310 --> 11:38.480
So now we'd have to look at the individual dot dot Why Dot Z and then find you know the maximum of that.

11:38.660 --> 11:45.340
That's not great because P-T 1.2 D is a top or we get that for free as well.

11:45.350 --> 11:49.710
Let me show you something else as well that we get for free with a name.

11:50.300 --> 11:54.380
Let's say that we want to calculate the dot product of two points.

11:54.380 --> 11:59.000
Now I know that we don't have dot product of two points but let's say that we had vectors which would

11:59.000 --> 12:07.440
be the same so I could actually say vector actually just use point to the being of point to D as a vector

12:07.570 --> 12:09.860
in a starting point of 0 0.

12:09.970 --> 12:10.320
OK.

12:10.350 --> 12:16.820
So that point then is a vector and thing of point 3 is the same thing it's just a vector where it's

12:16.830 --> 12:21.550
beginning point is the origin 0 0 and its end point is whatever that point is.

12:21.900 --> 12:27.010
So now if we want to calculate the dot product of two vectors so let's say we have a vector

12:29.650 --> 12:36.880
that say we have a equals or an x component a dot X right and an eighth of Y.

12:37.120 --> 12:41.680
And let's say we have B equals b dot X can beat out y.

12:41.680 --> 12:41.910
All right.

12:41.920 --> 12:46.340
Let's say that we have these two vectors with these two two components.

12:46.450 --> 12:47.790
What is the dot product.

12:47.950 --> 12:57.870
Well a dot B is simply equal to Adolph X times beat or X plus Adolf Y Times beat up y.

12:57.880 --> 13:04.260
We just multiply the components pairwise between the two vectors and then we add those values up.

13:04.270 --> 13:06.110
That's called the dot product.

13:06.490 --> 13:09.520
So that's the kind of formula we want to implement.

13:09.730 --> 13:13.990
Well let's go ahead and do that with our 3-D point.

13:14.040 --> 13:14.390
OK.

13:14.440 --> 13:15.450
We could certainly do that.

13:15.450 --> 13:18.940
So let's say there dot product

13:22.040 --> 13:28.120
3D and I'm going to name it 3D because this is only going to work with 3D points.

13:28.130 --> 13:28.990
Let's see why.

13:29.060 --> 13:31.900
Because I take two parameters a and b.

13:32.030 --> 13:33.550
Those are going to be 3D points.

13:33.550 --> 13:34.800
That's what they have to be.

13:34.850 --> 13:35.930
So what am I going to return.

13:35.930 --> 13:47.100
I'm going to return it up x times of X plus Adolf Y Times lead off y plus a Z times the dot Z.

13:47.420 --> 13:48.850
And that's the dot product.

13:49.010 --> 13:54.750
So now I can call I can create let's say P-T one equals points.

13:54.830 --> 14:00.230
3d one common to come at three and then TTB two equals.

14:00.260 --> 14:01.970
Point 3D.

14:02.270 --> 14:04.130
Let's say one come one come all one.

14:04.310 --> 14:08.680
So the dot product should be one plus two plus three right.

14:08.690 --> 14:11.510
One times one is one two times one is one three times one is one.

14:11.510 --> 14:18.400
So let's go ahead and do that dot product 3D off point 1 and point 2.

14:18.800 --> 14:20.960
And indeed we get six k.

14:20.990 --> 14:22.450
So that was just fine.

14:22.700 --> 14:25.850
Now how about doing it for the arm.

14:25.850 --> 14:30.530
Point to the now name topple or remember it's a.

14:30.620 --> 14:33.460
So if you think about the top or here's what we have right.

14:33.470 --> 14:38.290
We have that eight equals let's say one common two.

14:38.300 --> 14:43.250
This is two dimensional and B equals that say 1 come 1.

14:43.250 --> 14:45.400
So now how are we going to get the dot product.

14:45.410 --> 14:49.150
Well we need to multiply one by one and then multiply two by one.

14:49.250 --> 14:54.920
So let's first start by looking at what happens if we Zipp those two things up and I'm going to convert

14:54.920 --> 14:56.820
it to a list so I can print it out.

14:56.960 --> 15:02.020
But let's go ahead and zip a and b remember what Ziv does right.

15:02.030 --> 15:09.140
It basically takes the the the elements from A and B pairwise and it creates a couple of them and then

15:09.140 --> 15:10.730
does it for as many elements as we have.

15:10.730 --> 15:16.550
So here we get one in one and then two and one and you'll now would we have to do is we just have to

15:16.550 --> 15:23.570
multiply what's inside each Toppo that will give us the product and then we have to sum up those products

15:24.110 --> 15:25.940
so we can do this quite easily.

15:26.000 --> 15:29.570
We can start by taking let's say a list comprehension.

15:30.170 --> 15:35.700
And we're going to iterate what we're going to say for elements in a comma.

15:35.890 --> 15:36.370
Right.

15:36.530 --> 15:37.430
What are we going to get.

15:37.430 --> 15:38.840
What is each element going to be.

15:38.840 --> 15:40.780
It's going to be this topple one one.

15:41.000 --> 15:42.920
What we want to do it we want to multiply.

15:42.980 --> 15:49.160
So we're going to say that times that K for e and that that's going to give us what that's going to

15:49.160 --> 15:49.690
give us.

15:49.730 --> 15:51.650
1 times 1 and 2 times 1.

15:51.650 --> 15:58.600
And now what do we need to do with it to sum up to get the product.

15:58.770 --> 16:02.220
And in fact we don't even need the square parentheses here.

16:02.400 --> 16:03.980
It just works that way.

16:04.200 --> 16:10.650
So this is how we get the dot product of two elements A and B two vectors A and B.

16:10.680 --> 16:12.330
The advantage is that.

16:12.330 --> 16:18.720
So let's let's first write it as a function let's say dot product a comedy.

16:19.020 --> 16:20.220
And what are we going to retire.

16:20.220 --> 16:21.950
We're going to return this.

16:21.960 --> 16:25.560
We're just going to copy paste this thing over here.

16:25.740 --> 16:29.850
So now I can call dupped product on a and b.

16:30.030 --> 16:30.380
Right.

16:30.420 --> 16:31.520
Which is three.

16:31.620 --> 16:32.910
Now what about points.

16:32.910 --> 16:39.510
Well let's go ahead and define a point that points to the let's say one comment to let's keep the same

16:39.510 --> 16:45.270
values and point two equals points to the one on a 1 k.

16:45.420 --> 16:49.260
So remember we're considering those as vectors.

16:49.260 --> 16:50.000
So we have those.

16:50.010 --> 16:56.920
Now we can do a dot product of P-T 1 and 2.

16:57.270 --> 16:58.880
And that works just fine.

16:59.220 --> 17:04.320
But here's the advantage of this function and the fact that these are just topples.

17:04.470 --> 17:13.010
If we can go ahead now and we can say point let's actually call it vector 3D equals named Toppo.

17:13.320 --> 17:18.970
And this will be the class name back to 3D and we will have X Y and Z.

17:19.100 --> 17:25.400
OK so now we have a vector defined so now we can say vector one equals vector.

17:25.430 --> 17:33.220
3d one common to come at three and vector two equals vector 3D one from one common one.

17:33.280 --> 17:33.890
OK.

17:34.170 --> 17:36.300
And what I do wrong here.

17:37.380 --> 17:39.150
Get to 3D is not defined.

17:39.160 --> 17:41.160
I have to spell it correctly.

17:41.260 --> 17:41.750
OK.

17:42.040 --> 17:45.220
So now we have these two vectors and of course we can list them out right.

17:45.220 --> 17:46.670
We can see their representation.

17:46.690 --> 17:48.300
X 1 y to z 3.

17:48.340 --> 17:56.440
But remember that V-1 is a tadpole and so is V-2 which means now we get the dot product directly by

17:56.440 --> 17:59.060
using our dot product function of the proper function.

17:59.060 --> 18:06.610
Never made any assumption on the number of coordinates in a and b Whereas when we did it for the 3D

18:06.610 --> 18:12.730
We have to because the only way we could get at those was not the only way but really the the most salient

18:12.730 --> 18:17.140
way of getting to the coordinates was using the dot notation.

18:17.360 --> 18:22.950
So now we get the dot product and we get did six one times one plus two times one plus three times one.

18:23.240 --> 18:23.440
OK.

18:23.450 --> 18:28.740
So the next thing I want to point out is that those things are indeed those name topples indeed topples.

18:28.760 --> 18:34.130
So we can take for example we solve the one has that representation but we could also just look at the

18:34.160 --> 18:39.230
plane topple this way we can just you know pass it to topple and it's going to give us back to the plane

18:39.530 --> 18:41.220
you know undecorated Toppo.

18:41.460 --> 18:43.680
Well not decorated but the plane topple.

18:43.780 --> 18:48.890
That's the one we be that underlies V-1 which is that class.

18:48.950 --> 18:54.980
So this means that we can access elements in V-1 also by things like Index for example the 1 0 0 0 we

18:54.980 --> 18:57.040
can slice it 0 2.

18:57.050 --> 19:00.200
So we should get the first two right of the one.

19:00.200 --> 19:05.180
Remember V-1 is the name top all right not just the plain table it's a name.

19:05.630 --> 19:12.260
But because it's a name table we can either access it as a top hole or we can access it using the field

19:12.260 --> 19:12.800
names.

19:12.830 --> 19:15.950
The one on X-Fi wondered why and so on.

19:16.340 --> 19:21.520
So that's the advantage of the nine top we can choose which way we want to access the data.

19:21.620 --> 19:26.040
Either we can use that as a table or we can use it as a class with property names.

19:26.140 --> 19:30.470
There's different ways that we can specify the field and when we create a name Applegate's go ahead

19:30.470 --> 19:38.210
and create let's say a circle so named Toppo it's going to be so a call and remember that we have that

19:38.210 --> 19:42.070
in the previous in the previous video with two videos back.

19:42.080 --> 19:47.360
We use the circle and then we have to basically use the convention that the first item was going to

19:47.360 --> 19:51.980
be the X called the centerpoint second item was going to be the y coordinates of the center point and

19:51.980 --> 19:53.840
the last one was going to be radius.

19:53.840 --> 19:58.550
Here we can actually give it a name so we can say Center x.

19:58.730 --> 20:03.460
I'm going to use spaces here center Y.

20:03.500 --> 20:06.830
So you'll notice I'm not using now a list or a couple of strings.

20:06.830 --> 20:10.650
I'm just giving one string separated by whitespace.

20:10.670 --> 20:12.290
I'm going to put let's say a.

20:12.620 --> 20:16.530
Just to show you that it doesn't matter you know how many spaces we put.

20:16.940 --> 20:25.170
So there's my name top hole and I can create a new circle I can say c cold so call that say add 0 0

20:25.190 --> 20:30.160
for a radius of 10 and I follow get C. I get so-call sent to that center.

20:30.160 --> 20:31.430
Why is that radius is that.

20:31.430 --> 20:36.840
And in fact I can type so-called dobs radius and get the radius out that way.

20:36.860 --> 20:44.200
Just as you know just like a normal class since it is a class and rageous is a property on class.

20:44.340 --> 20:49.830
And just to show you that we can actually use even different types of whitespace.

20:49.830 --> 20:53.850
Let's go ahead and create a stock named top hole.

20:54.540 --> 20:56.020
So we're going to call it stock.

20:56.040 --> 21:01.560
And here I want the the symbol the year month day high high low close.

21:01.560 --> 21:01.730
Right.

21:01.740 --> 21:03.460
Oh the open high low close.

21:03.480 --> 21:05.520
So this will be a pretty long string.

21:05.520 --> 21:13.930
I have to say symbol then the year in the month the day then open the high the low and the close.

21:13.960 --> 21:14.500
OK.

21:14.850 --> 21:17.530
So if you find that it's starting to get too long.

21:17.610 --> 21:19.050
Well you can just do this.

21:19.110 --> 21:22.940
We can put this as a multi-line string.

21:22.950 --> 21:25.440
So we do have to make it a multi-line string.

21:26.190 --> 21:30.480
But now that I have that I can go ahead and do it this way.

21:30.660 --> 21:32.630
That's probably a little overkill.

21:33.000 --> 21:39.900
But you could and me go ahead and then that little bit more just to show you doesn't matter.

21:39.900 --> 21:41.170
Pocket Tanser.

21:41.460 --> 21:41.940
OK.

21:42.030 --> 21:43.200
Now I have a stock.

21:43.290 --> 21:51.270
So now I could say Dow Jones Industrial Average equals stock and really tickled the Dow Jones industrial

21:51.270 --> 21:56.340
average let's say it was 2018 and I'm looking at my notes here to say I get the numbers right.

21:56.340 --> 21:57.890
Let's say the 25th.

21:57.960 --> 22:05.080
The opening price was well you know rounded twenty six thousand 313 by the way.

22:05.130 --> 22:10.960
You can write the numbers this way but non-pilot on 360 you can actually separate digits using the underscore.

22:11.010 --> 22:12.700
Makes it easy to read.

22:13.070 --> 22:16.290
Twenty six four five eight.

22:16.420 --> 22:19.770
And we have 26 to 60.

22:19.770 --> 22:23.570
Just reading my notes and 26 393.

22:23.710 --> 22:24.150
OK.

22:24.240 --> 22:28.080
So now we have this nine top all right.

22:28.080 --> 22:30.930
And you could see it picked up the names of the fields correctly.

22:31.020 --> 22:35.020
So you got a variety of ways that you can use to create the field names.

22:37.060 --> 22:44.870
We can of course access as we saw before the elements of the values in the top all in the DJIA toppled

22:44.890 --> 22:50.350
because it is a topple but it's a name topple and so we can access it by using the property names that

22:50.350 --> 22:56.920
the name of class provides us so we can say DJI a door closed for example and that will give us the

22:56.920 --> 22:59.110
closed 26 393.

22:59.320 --> 23:00.990
But of course it's also a topple.

23:01.000 --> 23:02.280
So we can iterate through it.

23:02.320 --> 23:11.600
We can say for item in DJIA print item and it prints out all the things and of course the order is simple

23:11.690 --> 23:14.020
and the order is maintained to topple.

23:14.050 --> 23:15.390
So it's a sequence.

23:15.400 --> 23:21.220
So when we iterate through the sequence it iterates it in the same order that the that it's in the puzzle

23:23.250 --> 23:25.380
now we can unpack them as well.

23:25.590 --> 23:27.150
So that's a real advantage.

23:27.150 --> 23:33.560
Let's say we have let's go back to our point we have to be equals point to the 10 comma 20.

23:33.660 --> 23:34.890
That's very easy to unpack.

23:34.890 --> 23:36.870
We can just say x y equals p.

23:36.870 --> 23:42.490
We've seen how to unpack topples and now we can look at the value of x That's 10 and the value of y.

23:42.630 --> 23:43.600
That's 20.

23:44.040 --> 23:45.770
So very easy to unpack topples.

23:45.810 --> 23:48.810
And of course we can use extended unpacking with topples.

23:48.810 --> 23:50.100
Again we've seen that.

23:50.100 --> 23:53.000
So let's do that with the Dow Jones Industrial.

23:53.020 --> 23:59.790
Let's say I want to grab the symbol the year the month and the day and the close I was interested in

23:59.790 --> 24:08.070
that so I'm going to say similar calmer year calm months calmer day calmer star underscore I'm using

24:08.070 --> 24:13.080
the underscore as a variable name to validate but it just means I'm not really interested in it.

24:13.290 --> 24:15.340
And then the last one will be close.

24:15.510 --> 24:17.150
And then we can unpack it this way.

24:17.220 --> 24:26.970
So now symbol and I'm going to pack a tuple just to show you that we have now that value we have DJIA

24:26.970 --> 24:32.670
was in symbol 2018 was and you know also we we did extensive unpacking on the tuple which makes life

24:32.670 --> 24:38.010
a lot easier in certain circumstances which we'll get to when we talk about extending and modifying

24:38.340 --> 24:43.190
the you know the tuple because it is immutable so we can't actually mutate it.

24:43.380 --> 24:45.690
But essentially what we can do is just like with strings.

24:45.690 --> 24:47.650
How do you change a string.

24:47.700 --> 24:53.400
You take the existing string you manipulate it and you create a new string out of that and you position

24:53.550 --> 24:57.690
you don't mutate the string but you can create new strings given a string.

24:57.840 --> 24:59.040
You can do things on it.

24:59.160 --> 25:00.790
So we'll do the same thing we'll see.

25:00.810 --> 25:01.650
You know how to do that.

25:01.650 --> 25:03.250
We've named Bubbles as well.

25:03.630 --> 25:08.640
Oh and by the way the underscore is as I said a valid variable name.

25:08.640 --> 25:15.780
So we can actually print it out and you can see it's the values within Pick-Up 26 3 1 3 26 4 5 8 26

25:15.780 --> 25:16.620
to 60.

25:16.740 --> 25:22.770
Those three because we grab your your month stay up your month and day and close and the rest were ignored

25:23.040 --> 25:25.970
by essentially unpacking it into this variable.

25:26.010 --> 25:30.020
The only thing with name topples you cannot use an underscore for your field names.

25:30.060 --> 25:41.040
So if you try and do something like this let's say person equals named toppled person and let's say

25:41.040 --> 25:47.060
you want to say name age and underscore social security number for example.

25:47.520 --> 25:48.910
It's going to give you an error.

25:48.950 --> 25:51.900
It's going to say no field names cannot start with the underscore.

25:51.900 --> 25:55.190
Again that's got nothing to do with classes and regular classes you can.

25:55.200 --> 26:02.160
There's nothing that stops you in here from saying self does underscore SSN equals all defaulted to

26:02.160 --> 26:02.490
none.

26:02.520 --> 26:05.320
That works just fine as you see nothing.

26:05.580 --> 26:07.130
Python didn't complain.

26:07.370 --> 26:09.210
So it's got nothing to do with that.

26:09.210 --> 26:12.050
It's the type of function that this allows that.

26:12.060 --> 26:18.270
And that's because it has this property which is a key word only on this property that has this argument

26:18.570 --> 26:24.120
which is a key word only argument called rename by default it's false that if you set it to true it

26:24.120 --> 26:29.310
will basically take any invalid field name and generate a new one for us that is valid.

26:29.550 --> 26:33.250
And the way it does it is it uses the underscore and the position.

26:33.420 --> 26:36.150
So it reserves the underscore for doing that.

26:36.210 --> 26:40.790
And if you think about it let's say you had multiple of those let's say over here I had.

26:40.830 --> 26:46.590
So what's going to happen here is that the fields and you can always look at the fields by looking at

26:46.590 --> 26:49.710
the underscores Fields property of the class.

26:49.830 --> 26:51.040
We have underscored too.

26:51.090 --> 26:53.000
So that's what it put in.

26:53.160 --> 26:59.260
Instead it replaced underscore SSN with that what if we'd had you know another field in view underscored

26:59.490 --> 27:04.180
you know while underscore at this point underscore three.

27:04.770 --> 27:10.440
Well if it didn't do the replacement on this one it would have a problem right if it allowed this to

27:10.440 --> 27:12.730
be correct and it did have a place on this one.

27:12.900 --> 27:14.510
While it would run into an issue.

27:14.580 --> 27:21.800
So anyways the idea is that it basically by reserving the underscore for itself to rename fields.

27:21.930 --> 27:27.120
It avoids potential clashes that wasn't a very good example but it Avorn you know it avoids potential

27:27.120 --> 27:29.920
clashes with existing field names.

27:29.940 --> 27:33.810
So that was guaranteed that it's not going to step over any toes or.

27:33.900 --> 27:35.250
The introspection.

27:35.250 --> 27:36.830
We've seen this now.

27:36.840 --> 27:44.940
How do you feel so we can always look at Feel so we can look at a point 3D underscore feels and point

27:44.950 --> 27:46.410
3d of course is our class.

27:46.560 --> 27:50.390
So it doesn't have that property but our point to the does right.

27:50.430 --> 27:52.180
It tells us we have x and y.

27:52.260 --> 27:57.780
We also have the stock and we get that as well right.

27:57.780 --> 28:02.920
We get all the fields that are defined in the stock named tuple.

28:02.920 --> 28:08.250
The other thing that's really interesting is that we can actually look at the source code for the class

28:08.490 --> 28:12.680
that was essentially generated by the name tuple.

28:12.680 --> 28:17.070
It doesn't generate that source code it actually generates the class it uses something else.

28:17.070 --> 28:20.670
We'll get into that later when we look at our metaprogramming.

28:20.680 --> 28:26.430
But isn't really if you want to do it yourself you would be able to take this particular code that we

28:26.430 --> 28:29.890
have here and recreate the name tuple yourself.

28:30.360 --> 28:37.730
So let's take a look at Starc underscore source and let's print it out so we get the line breaks when

28:37.730 --> 28:39.810
needed.

28:39.810 --> 28:43.340
So there's a bunch of stuff going on and I'm not going to get into that.

28:43.470 --> 28:48.070
But basically you can see that we have this under Schofields remember that property that we looked at

28:48.090 --> 28:51.930
underscore feels that return that that's where it comes from.

28:51.930 --> 28:54.860
Now this was generated dynamically by name tuple.

28:54.900 --> 28:58.590
So I generated this class dynamically but Python is a dynamic language.

28:58.590 --> 29:02.010
It's possible to define classes at runtime.

29:02.640 --> 29:04.260
And this is what exactly what's happening.

29:04.260 --> 29:11.470
You can see we have this done to a new method and the Dundon new method has these as parameter names

29:11.480 --> 29:15.560
and that's why we can use keyword parameters when we generate instances of stock.

29:15.560 --> 29:20.490
And we can actually use symbol equals DJIA your equals 20:18 and so on.

29:20.630 --> 29:26.300
We saw that with a point class it also has the rep of method done for us.

29:26.350 --> 29:32.710
So we have that and it also has all these properties we have like symbols symbol it's going to go and

29:32.710 --> 29:39.820
grab the item at position 0 in the tuple years it's to go and grab it a one close it's going to go grab

29:39.820 --> 29:46.040
it it's at 7 so you can see we have all these properties in this class and there's other things as well

29:46.050 --> 29:52.510
that are in this class that we'll get to later like replace for example and make and then we'll also

29:52.510 --> 29:54.730
take a look at as direct as well.

29:57.450 --> 30:03.710
And we're going to look at pickling arm but we'll look at the other methods that are available.

30:04.050 --> 30:12.460
And of course if you look at the underscore source for a different name to pull that same point to deal

30:12.590 --> 30:16.990
underscores So it's dot com.

30:17.220 --> 30:19.060
And let's print that as well.

30:21.680 --> 30:26.380
So it formats nicely you'll see that you know there's differences.

30:26.380 --> 30:29.290
It looks very similar it has a lot of the same stuff.

30:29.440 --> 30:34.810
But now there's only two fields the dhanda the underscore field is just these two names.

30:34.990 --> 30:38.980
You'll see that we only have two properties here instead of the you know the eight that we had in the

30:38.980 --> 30:39.930
other one and so on.

30:39.940 --> 30:45.820
But you still have the addict the done the wrapper the underscore replace on the scale make all that

30:45.820 --> 30:46.460
is still there.

30:46.600 --> 30:49.510
So let's just look at the as dict method.

30:49.600 --> 30:54.340
So we have let's say art Dow Jones Industrial and what we can do.

30:54.340 --> 31:02.470
We can use that instance and call the dict method and that just creates a dictionary creates a dictionary

31:02.470 --> 31:02.720
nights.

31:02.740 --> 31:05.900
Actually an older dict and I'll talk about that in a second.

31:05.980 --> 31:10.980
But you can see that the dictionary has the key and the value.

31:11.080 --> 31:12.520
So that's that's what that is.

31:12.520 --> 31:16.320
And so if we assign it to let's say a variable D.

31:16.330 --> 31:26.260
Now I can go and say d symbol OK I can access it just like a regular dictionary and I can have the clothes

31:26.260 --> 31:27.170
for example.

31:27.170 --> 31:40.640
And we get that now why an ordered dict on the let's run this again just to show your MDG underscore

31:40.670 --> 31:49.700
and as dict y y an older dictionary and older dictionaries a special dictionary that's implemented in

31:49.700 --> 31:53.540
the standard library that maintains the older of the keys.

31:53.540 --> 31:59.510
So when you create an older dictionary and you add keys to it the keys are guaranteed to stay in order.

31:59.750 --> 32:06.470
And I've said before that the dictionary the standard dictionary in Python doesn't guarantee that like

32:06.470 --> 32:10.490
set sets don't guarantee ordering but that's no longer true.

32:10.490 --> 32:18.680
In fact dictionaries and Python 3:6 by the way they are implemented do maintain key order and until

32:18.680 --> 32:21.460
very recently however it was not guaranteed.

32:21.470 --> 32:28.400
So you could not actually really use that fact in your code because even though the older was guaranteed

32:28.400 --> 32:33.820
in a dictionary it might have changed you somewhere down the line and then your code would break.

32:33.830 --> 32:39.610
So we never considered dictionaries even in Python 3:6 as being ordered.

32:39.710 --> 32:43.160
And so we have this all the dictums that have been around for quite a while.

32:43.400 --> 32:49.410
But the new implementation of dictionary that was put in to Python 3:6 does maintain the order.

32:49.760 --> 32:55.710
And last year in just before Christmas there was a nice Christmas gift actually for Python programmers.

32:56.000 --> 33:03.060
Guido and Rossum decided that yeah that's moving forward dictionaries will guarantee to keep order.

33:03.230 --> 33:04.120
So that's great.

33:04.130 --> 33:09.140
That means that you know we don't really need to be using all the disks anymore so my prediction is

33:09.140 --> 33:14.750
that these are slowly going to start disappearing and will stay you know stick to a regular dictionary.

33:14.750 --> 33:20.130
But you can always you know convert and all addicted to addict because an addict inherits from Dick.

33:20.150 --> 33:21.420
It is it is a dick.

33:21.620 --> 33:25.610
So you can say Dick ordered another old addicts

33:30.640 --> 33:33.440
can always do that and we get this OK.

33:33.550 --> 33:39.220
But now you'll notice what happened is that the way it did that it probably got these in a different

33:39.250 --> 33:41.670
order and so we lost the order here.

33:42.730 --> 33:47.140
So we'll see if that gets changed in the standard library if it now you don't actually return a dictionary

33:47.140 --> 33:47.770
or not.

33:47.800 --> 33:52.060
You're also probably wondering if there's a lot of overhead using name topples instead of just a regular

33:52.060 --> 33:52.730
topic.

33:53.020 --> 33:56.120
And the answer is really not that much.

33:56.140 --> 34:00.870
The names of the fields and the properties are in the class right.

34:00.880 --> 34:04.220
They're not in every object the class has the field.

34:04.240 --> 34:05.200
We solve that right.

34:05.200 --> 34:11.680
The field names you know are in the class so yes we have a class but that class is just a one time thing

34:11.710 --> 34:16.690
and then every instance is really just a tuple and has some extra things.

34:16.690 --> 34:20.880
But there's really you know literally no overhead or not.

34:20.890 --> 34:23.980
I mean not literally there is extremely little overhead.

34:23.980 --> 34:30.070
If you're creating thousands for example of instances of the point to d you're not incurring you know

34:30.070 --> 34:34.460
creating this thing a thousand times and having the field names a thousand times.

34:34.480 --> 34:35.940
That's told in the class.

34:36.100 --> 34:38.590
The object itself is a tuple.

34:38.700 --> 34:41.490
It's also a name tuple but it is also a tuple.

34:41.580 --> 34:43.600
So not really a lot of overhead.

34:43.650 --> 34:48.730
If you do access the property names using the dot dot dot dot y.

34:48.840 --> 34:53.190
Sure it's got some overhead it's going to have to go basically into a property and then you know run

34:53.190 --> 34:57.830
this code item whether it's going to have to go and get the item out of the tuple.

34:57.840 --> 35:02.160
But this is no different than if you're writing your own class and writing darf x.

35:02.160 --> 35:06.110
It's kind of have to you know look at the property and retrieve the value for that property.

35:06.120 --> 35:09.070
So really you know in terms of overhead.

35:09.480 --> 35:10.450
Not a whole lot.

35:11.240 --> 35:11.560
All right.

35:11.570 --> 35:13.780
Thanks for watching and I'll see you in the next video.
